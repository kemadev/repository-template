# File managed by repo-as-code, do not edit manually!
version: 3

vars:
  tmpDir: /tmp
  resultsOutputFile: '{{ .tmpDir }}/task-lint-results.txt'

  dockerRunBase: docker run --rm -i
  dockerRunBaseTTY: '{{ .dockerRunBase }} -t'

  reusableConfigsSubdir: config/reusable
  dockerLinter: '{{ .dockerRunBase }} ghcr.io/hadolint/hadolint'
  ghaLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/repo" --workdir /repo rhysd/actionlint:latest -color'
  secretsLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest git "file:///pwd" --since-commit HEAD --log-level=-1 --fail'
  sastLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/src" semgrep/semgrep:latest semgrep scan --config auto --error'
  goLinter: '{{ .dockerRunBaseTTY }} -v $(pwd):/app -v ~/.cache/golangci-lint:/root/.cache --workdir /app golangci/golangci-lint:latest golangci-lint run --show-stats=false --config /app/{{ .reusableConfigsSubdir }}/.golangci.yaml'
  yamlLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/code" pipelinecomponents/yamllint:latest -c {{ .reusableConfigsSubdir }}/.yamllint.yaml $(find . -path ./dist -prune -o -name "*.yaml" -print)'
  markdownLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/workdir" davidanson/markdownlint-cli2:latest --config {{ .reusableConfigsSubdir }}/.markdownlint.yaml "**/*.md" "#dist"'
  shellLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/mnt" koalaman/shellcheck:latest $(find . -name "*.sh" | tr "\n" " ")'

run: once

tasks:
  # Stage all files
  stage-all:
    desc: Stage all files
    cmds:
      - cmd: '{{ .gitCli }} add .'

  # Docker
  lint-docker:
    desc: Lint Dockerfiles
    status:
      - '[ -z "$(find . -name "*Dockerfile*") ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo docker failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: find . -name '*Dockerfile*' -print0 | xargs -0 -I {} sh -c 'cat {} | {{ .dockerLinter }}'

  # GitHub Actions
  lint-gha:
    desc: Lint GitHub Actions workflows
    status:
      - '[ -z "$(find .github -name "*.yaml" -o -name "*.yml")" ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo gha failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: '{{ .ghaLinter }}'

  # Secrets
  lint-secrets:
    desc: Lint secrets
    deps:
      - checkout-reusable-files
      - stage-all
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo secrets failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      # cmd: Redirect stderr to /dev/null to avoid printing the headers
      - '{{ .secretsLinter }} 2>/dev/null'

  # Static Application Security Testing (SAST)
  lint-sast:
    desc: Lint source code
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo sast failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      # cmd: Redirect stderr to /dev/null to avoid printing the headers
      - '{{ .sastLinter }} 2>/dev/null'

  # Go
  lint-go:
    desc: Lint Go source code
    status:
      - '[ -z "$(find . -name "*.go")" ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo go failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: '{{ .goLinter }}'

  # Markdown
  lint-markdown:
    desc: Lint Markdown files
    status:
      - '[ -z "$(find . -name "*.md")" ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo markdown failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: '{{ .markdownLinter }}'

  # Shell
  lint-shell:
    desc: Lint shell scripts
    status:
      - '[ -z "$(find . -name "*.sh")" ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo shell failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: '{{ .shellLinter }}'

  # YAML
  lint-yaml:
    desc: Lint YAML files
    status:
      - '[ -z "$(find . -name "*.yaml" -o -name "*.yml")" ]'
    deps:
      - checkout-reusable-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo yaml failed with code {{ .EXIT_CODE }} >> {{ .resultsOutputFile }}{{ end }}'
      - cmd: '{{ .yamlLinter }}'

  # Lint all
  lint-all:
    desc: Lint all
    ignore_error: true
    cmds:
      - defer:
          task: report-results
      - cmd: echo -n > {{ .resultsOutputFile }}
      - task: lint-go
      - task: lint-secrets
      - task: lint-docker
      - task: lint-gha
      - task: lint-markdown
      - task: lint-shell
      - task: lint-yaml
      - task: lint-sast

  # Report results
  report-results:
    desc: Report results
    internal: true
    silent: true
    vars:
      colorBlack: \033[0;30m
      colorYellow: \033[0;33m
      colorRed: \033[0;31m
      colorGreen: \033[0;32m
    cmds:
      - cmd: echo -e "\n\n"
      - cmd: echo -n -e "{{ .colorBlack }}"
      - cmd: echo "Results:"
      - cmd: echo -n -e "{{ .colorYellow }}"
      - cmd: cat {{ .resultsOutputFile }}
      - cmd: if [ -s {{ .resultsOutputFile }} ]; then echo -n -e "{{ .colorRed }}"; echo "Linting failed"; exit 1; else echo -n -e "{{ .colorGreen }}"; echo "Linting passed"; fi
