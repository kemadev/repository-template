version: 3

vars:
  tmpDir: /tmp

  gitCli: git
  reusableConfigsRepoPrefix: https://github.com
  reusableConfigsRepoOrgAndName: kemadev/workflows-and-actions
  reusableConfigsRepoFqdn: '{{ .reusableConfigsRepoPrefix }}/{{ .reusableConfigsRepoOrgAndName }}'
  reusableConfigsSubdir: config/reusable
  reusableConfigsCloneDir: '{{ .reusableConfigsCloneDir }}'
  reusableConfigsCheckoutSuccessMarker: task-checkout-reusable-config-files-configs-success
  reusableConfigsCheckoutSuccessMarkerLocation: '{{ .reusableConfigsCheckoutSuccessMarkerLocation }}'

  dockerRunBase: docker run --rm -i
  dockerRunBaseTTY: '{{ .dockerRunBase }} -t'

  dockerLinter: '{{ .dockerRunBase }} ghcr.io/hadolint/hadolint'
  ghaLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/repo" --workdir /repo rhysd/actionlint:latest -color'
  secretsLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest git "file:///pwd" --since-commit HEAD --log-level=-1 --fail'
  sastLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/src" semgrep/semgrep:latest semgrep scan --config auto --error'
  goLinter: '{{ .dockerRunBaseTTY }} -v $(pwd):/app -v ~/.cache/golangci-lint:/root/.cache --workdir /app golangci/golangci-lint:latest golangci-lint run --show-stats=false --config /app/{{ .reusableConfigsSubdir }}/.golangci.yaml'
  yamlLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/code" pipelinecomponents/yamllint:latest -c {{ .reusableConfigsSubdir }}/.yamllint.yaml .'
  markdownLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/workdir" davidanson/markdownlint-cli2:latest --config {{ .reusableConfigsSubdir }}/.markdownlint.yaml "**/*.md"'
  shellLinter: '{{ .dockerRunBaseTTY }} -v "$(pwd):/mnt" koalaman/shellcheck:latest $(find . -name "*.sh" | tr "\n" " ")'

  runId:
    sh: mktemp -p '{{ .tmpDir }}' -t task-lint-XXXXXX

run: once

tasks:
  # Checkout reusable configs
  checkout-reusable-config-files:
    desc: Checkout reusable configs, only subdirectory
    internal: true
    silent: true
    status:
      - '[ -f {{ .reusableConfigsCheckoutSuccessMarkerLocation }} ]'
    cmds:
      - '{{ .gitCli }} clone --depth 1 {{ .reusableConfigsRepoFqdn }} {{ .reusableConfigsCloneDir }}'
      - find {{ .reusableConfigsCloneDir }}/{{ .reusableConfigsSubdir }} -maxdepth 1 -mindepth 1 -name '*' ! -name '*.md' ! -name '.gitignore' -exec cp {} {{ .reusableConfigsSubdir }} \;
      - touch {{ .reusableConfigsCheckoutSuccessMarkerLocation }}

  # Reset reusable configs checkout task so it can be run again
  reset-reusable-checkout:
    desc: Reset reusable configs
    internal: true
    cmds:
      - rm -rf {{ .reusableConfigsCheckoutSuccessMarkerLocation }}
      - rm -rf {{ .reusableConfigsCloneDir }}

  # Stage all files
  stage-all:
    desc: Stage all files
    cmds:
      - '{{ .gitCli }} add .'

  # Docker
  lint-docker:
    desc: Lint Dockerfiles
    status:
      - '[ -z "$(find . -name "*Dockerfile*") ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo docker failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - find . -name '*Dockerfile*' -print0 | xargs -0 -I {} sh -c 'cat {} | {{ .dockerLinter }}'

  # GitHub Actions
  lint-gha:
    desc: Lint GitHub Actions workflows
    status:
      - '[ -z "$(find .github -name "*.yaml" -o -name "*.yml")" ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo gha failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - '{{ .ghaLinter }}'

  # Secrets
  lint-secrets:
    desc: Lint secrets
    deps:
      - checkout-reusable-config-files
      - stage-all
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo secrets failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      # Redirect stderr to /dev/null to avoid printing the headers
      - '{{ .secretsLinter }} 2>/dev/null'

  # Static Application Security Testing (SAST)
  lint-sast:
    desc: Lint source code
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo sast failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      # Redirect stderr to /dev/null to avoid printing the headers
      - '{{ .sastLinter }} 2>/dev/null'

  # Markdown
  lint-markdown:
    desc: Lint Markdown files
    status:
      - '[ -z "$(find . -name "*.md")" ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo markdown failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - '{{ .markdownLinter }}'

  # Go
  lint-go:
    desc: Lint Go source code
    status:
      - '[ -z "$(find . -name "*.go")" ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo go failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - '{{ .goLinter }}'

  # Shell
  lint-shell:
    desc: Lint shell scripts
    status:
      - '[ -z "$(find . -name "*.sh")" ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo shell failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - '{{ .shellLinter }}'

  # YAML
  lint-yaml:
    desc: Lint YAML files
    status:
      - '[ -z "$(find . -name "*.yaml" -o -name "*.yml")" ]'
    deps:
      - checkout-reusable-config-files
    cmds:
      - defer: '{{ if not .EXIT_CODE }}exit 0{{ else }}echo yaml failed with code {{ .EXIT_CODE }} >> {{ .runId }}{{ end }}'
        silent: true
      - '{{ .yamlLinter }}'

  # Lint all
  lint-all:
    desc: Lint all
    ignore_error: true
    vars:
      runId:
        sh: mktemp -p '{{ .tmpDir }}' -t task-lint-XXXXXX
    cmds:
      - defer:
          task: report-results
      - task: lint-docker
      - task: lint-gha
      - task: lint-secrets
      - task: lint-sast
      - task: lint-go
      - task: lint-markdown
      - task: lint-shell
      - task: lint-yaml

  # Report results
  report-results:
    desc: Report results
    internal: true
    cmds:
      - cat '{{ .runId }}'
