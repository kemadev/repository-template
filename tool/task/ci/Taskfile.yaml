version: 3

vars:
  tmpDir: /tmp

  gitCli: git
  reusableConfigsRepoPrefix: https://github.com
  reusableConfigsRepoOrgAndName: kemadev/workflows-and-actions
  reusableConfigsRepoFqdn: '{{ .reusableConfigsRepoPrefix }}/{{ .reusableConfigsRepoOrgAndName }}'
  reusableConfigsSubdir: config/reusable
  reusableConfigsCloneDir: '{{ .reusableConfigsCloneDir }}'
  reusableConfigsCheckoutSuccessMarker: task-checkout-reusable-config-files-configs-success
  reusableConfigsCheckoutSuccessMarkerLocation: '{{ .reusableConfigsCheckoutSuccessMarkerLocation }}'

  dockerRunBase: docker run --rm -it

  dockerLinter: '{{ .dockerRunBase }} ghcr.io/hadolint/hadolint'
  ghaLinter: '{{ .dockerRunBase }} -v "$(pwd):/repo" --workdir /repo rhysd/actionlint:latest -color'
  secretsLinter: '{{ .dockerRunBase }} -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest git "file:///pwd" --since-commit HEAD --fail'
  sastLinter: '{{ .dockerRunBase }} -v "$(pwd):/src" semgrep/semgrep:latest semgrep scan --config auto --error'
  goLinter: '{{ .dockerRunBase }} -v $(pwd):/app -v ~/.cache/golangci-lint:/root/.cache --workdir /app golangci/golangci-lint:latest golangci-lint run --config /app/{{ .reusableConfigsSubdir }}/.golangci.yaml'
  yamlLinter: '{{ .dockerRunBase }} -v "$(pwd):/code" pipelinecomponents/yamllint:latest -c {{ .reusableConfigsSubdir }}/.yamllint.yaml .'
  markdownLinter: '{{ .dockerRunBase }} -v "$(pwd):/workdir" davidanson/markdownlint-cli2:latest --config {{ .reusableConfigsSubdir }}/.markdownlint.yaml "**/*.md"'
  shellLinter: '{{ .dockerRunBase }} -v "$(pwd):/mnt" koalaman/shellcheck:latest $(find . -name "*.sh" | tr "\n" " ")'

run: once

tasks:
  # Checkout reusable configs
  checkout-reusable-config-files:
    desc: Checkout reusable configs, only subdirectory
    internal: true
    silent: true
    status:
      - '[ -f {{ .reusableConfigsCheckoutSuccessMarkerLocation }} ]'
    cmds:
      - '{{ .gitCli }} clone --depth 1 {{ .reusableConfigsRepoFqdn }} {{ .reusableConfigsCloneDir }}'
      - find {{ .reusableConfigsCloneDir }}/{{ .reusableConfigsSubdir }} -maxdepth 1 -mindepth 1 -name '*' ! -name '*.md' ! -name '.gitignore' -exec cp {} {{ .reusableConfigsSubdir }} \;
      - touch {{ .reusableConfigsCheckoutSuccessMarkerLocation }}

  # Reset reusable configs checkout task so it can be run again
  reset-reusable-checkout:
    desc: Reset reusable configs
    internal: true
    cmds:
      - rm -rf {{ .reusableConfigsCheckoutSuccessMarkerLocation }}
      - rm -rf {{ .reusableConfigsCloneDir }}

  # Stage all files
  stage-all:
    desc: Stage all files
    cmds:
      - '{{ .gitCli }} add .'

  # Docker
  docker-lint:
    desc: Lint Dockerfiles
    deps:
      - checkout-reusable-config-files
    cmds:
      - find . -name '*Dockerfile*' -print0 | xargs -0 -I {} sh -c 'cat {} | {{ .dockerLinter }}'

  # GitHub Actions
  gha-lint:
    desc: Lint GitHub Actions workflows
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .ghaLinter }}'

  # Secrets
  secrets-lint:
    desc: Lint secrets
    deps:
      - checkout-reusable-config-files
      - stage-all
    cmds:
      - '{{ .secretsLinter }}'

  # Static Application Security Testing (SAST)
  sast-lint:
    desc: Lint source code
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .sastLinter }}'

  # Go
  go-lint:
    desc: Lint Go source code
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .goLinter }}'

  # Markdown
  markdown-lint:
    desc: Lint Markdown files
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .markdownLinter }}'

  # Shell
  shell-lint:
    desc: Lint shell scripts
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .shellLinter }}'

  # YAML
  yaml-lint:
    desc: Lint YAML files
    deps:
      - checkout-reusable-config-files
    cmds:
      - '{{ .yamlLinter }}'

  # Lint all
  lint-all:
    desc: Lint all
    cmds:
      - task: docker-lint
      - task: gha-lint
      - task: secrets-lint
      - task: sast-lint
      - task: go-lint
      - task: markdown-lint
      - task: shell-lint
      - task: yaml-lint
