version: 3

vars:
  goCli: go
  goLinter: golangci-lint
  configDir: config
  reusableConfigDir: config/reusable
  distDir: dist

  goLinterConfig: '{{ .reusableConfigDir }}/.golangci.yaml'
  goCoverageReport: '{{ .distDir }}/cover.out'
  goCoverageHtml: '{{ .distDir }}/coverage.html'
  goBuildOutputDistSubdir: task
  goCmdDir: cmd

  goreleaserCli: goreleaser
  goreleaserConfig: '{{ .reusableConfigDir }}/.goreleaser.yaml'

run: once

tasks:
  # Go
  format:
    desc: Format all packages
    cmds:
      - '{{ .goCli }} fmt ./...'

  tidy:
    desc: Tidy go modules
    cmds:
      - '{{ .goCli }} mod tidy'

  lint:
    desc: Lint all packages
    deps:
      - format
    cmds:
      - '{{ .goLinter }} run ./... --config {{ .goLinterConfig }}'

  test:
    desc: Run tests on all packages
    deps:
      - format
    cmds:
      - '{{ .goCli }} test ./...'

  test-full:
    desc: Run tests on all packages, including coverage and benchmarks
    deps:
      - format
    cmds:
      - '{{ .goCli }} test -bench=. -benchmem -covermode=atomic -coverprofile={{ .goCoverageReport }} ./...'

  test-coverage:
    desc: Report coverage
    deps:
      - test_full
    cmds:
      - '{{ .goCli }} tool cover -html={{ .goCoverageReport }} -o={{ .goCoverageHtml }}'

  prepare:
    desc: Format, tidy, lint and test
    cmds:
      - task: format
      - task: tidy
      - task: lint
      - task: test

  ensure-service-exists:
    desc: Ensure that sample file exists
    internal: true
    silent: true
    cmds:
      - cmd: if [ ! -d ./{{ .goCmdDir }}/{{ .service | default "rtfm-you-forgot-to-pass-service-name" }} ]; then echo "Service dir '{{ .goCmdDir }}/{{ .service | default "rtfm-you-forgot-to-pass-service-name" }}' not found"; exit 1; fi

  render-goreleaser-config:
    desc: Render goreleaser config
    dir: .github/script/reusable/render-goreleaser-config
    vars:
      BUILDS_DIR_PARENT:
        sh: git rev-parse --show-toplevel
    env:
      GORELEASER_CONFIG_TEMPLATE_DIR: '{{ .BUILDS_DIR_PARENT }}/{{ .reusableConfigDir }}'
      GORELEASER_CONFIG_TEMPLATE_FILENAME: .goreleaser.yaml.go.tmpl
      GORELEASER_CONFIG_OUTPUT_FILE: '{{ .BUILDS_DIR_PARENT }}/{{ .reusableConfigDir }}/.goreleaser.yaml'
      BUILDS_DIR_PARENT: '{{ .BUILDS_DIR_PARENT }}'
      BUILDS_DIR: 'cmd'
    cmds:
      - '{{ .goCli }} run render-goreleaser-config.go'

  build:
    desc: Build the project
    deps:
      - checkout-reusable-files
    vars:
      service: '{{ .CLI_ARGS }}'
    cmds:
      - task: ensure-service-exists
        vars:
          # Propagate sampleName
          service: '{{ .service }}'
      - task: render-goreleaser-config
      - '{{ .goreleaserCli }} --config {{ .goreleaserConfig }} build --clean --snapshot'
